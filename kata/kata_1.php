<?php

#***************************************************************************************************************************
# 第一题
# 给定一个非负整数，例如3，返回一个字符串:'1 sheep...2 sheep...3 sheep...”。输入总是大于零的，即没有负整数。
#***************************************************************************************************************************

#解决方法一 
// function countsheep($n) {
//   return implode(array_map(function ($n) { return "$n sheep..."; }, range(1, $n)));
// }

#解决方法二 效率比第一个快
function countsheep($num) {
  $glue = ' sheep...';

  return implode($glue, range(1, $num)) . $glue;
}

#解决方法三(最普通的方法，效率也比第一个快)
// function countsheep($n) {
// 	$string = '';

// 	for ($i = 1; $i <= $n; $i++) { 
// 		$string .= $i . ' sheep...';
// 	}
//   return $string;
// }

//var_dump(countsheep(3));


#***************************************************************************************************************************
# 第二题
# 给任意一个正整数计算从1到num的所有数字的和。这些数字总是一个大于0的正整数。
#***************************************************************************************************************************

#解决方法一
//function summation($a) {
//  return array_sum(range(1, $a));
//}

#解决方法二
function summation($n) {
    return (1 + $n) * $n / 2;
}

//var_dump(summation(10));


#***************************************************************************************************************************
# 第三题
# 给定一个由字符串和数字组成的整数数组，将数组值的和作为数字返回。
#***************************************************************************************************************************

#解决方法一
function sum_mix($a) {
    return array_sum($a);
}

//var_dump(sum_mix([9, 3, '7', '3']));


#***************************************************************************************************************************
# 第四题
# 每个动物带一道菜。只有一条规则:这道菜的开头和结尾必须与动物的名字相同。例如，大蓝鹭带来了大蒜烤饼，山雀带来了巧克力蛋糕。编写一个函数盛宴，将动物的名称和菜肴作为参数，并返回true或false，以指示是否允许该动物将菜肴带到盛宴中。假设beast和dish总是小写字符串，并且每个字符串至少有两个字母。动物名和菜名可能包含连字符和空格，但它们不会出现在字符串的开头或结尾并且不包含数字。
#***************************************************************************************************************************

#解决方法一
// function feast($beast, $dish) {
//   return (($beast[0] === $dish[0]) && ($beast[strlen($beast) - 1] === $dish[strlen($dish) - 1]));
// }

#解决方法二
function feast($beast, $dish){
  return substr($beast, 0, 1) == substr($dish, 0, 1) && substr($beast, -1) == substr($dish,-1);
}

//var_dump(feast("great blue heron", "garlic naan"));
//var_dump(feast("brown bear", "bear claw"));


#***************************************************************************************************************************
# 第五题
# 从左到右去掉句子中的n个感叹号。n是正整数。
#***************************************************************************************************************************

#解决方法一
//function remove($s, $n){
//  return preg_replace('/!/', "", $s, $n);
//}

#解决方法二
 function remove($s, $n){
   return implode("", explode("!", $s, $n+1));
 }

//var_dump(remove("!!!Hi !!hi!!! !hi",1));


#***************************************************************************************************************************
# 第五题
# 从字符串中删除空格，然后返回结果字符串。
#***************************************************************************************************************************

#解决方法一
// function no_space(string $s){
//   return str_replace(' ', '', $s);
// }

#解决方法二
function no_space(string $s){
  return preg_replace("/\s/", "", $s);
}

#解决方法三
// function no_space(string $s): string {
//   return implode(explode(" ", $s));
// }

// var_dump(no_space('8 j 8   mBliB8g  imjB8B8  jl  B'));


#***************************************************************************************************************************
# 第六题
# 指定一个数组，求数组里数字的平方和
# For example:
# [1, 2, 3]   =>  1^2 + 2^2 + 3^2 = 14
#***************************************************************************************************************************

#解决方法一
function square_sum($numbers) : int {
  return array_sum(array_map(function(int $number) {
    return pow($number, 2);
  }, $numbers));
}

// var_dump(square_sum());


#***************************************************************************************************************************
# 第七题
# 判断字符串是大写的吗？
#***************************************************************************************************************************

function is_uppercase($str) {
	return (strtoupper($str) == $str) ? true : false;
}


#***************************************************************************************************************************
# 第八题
# 把二进制的字符串转换为十进制的数字
#***************************************************************************************************************************

#解决方法一(傻不拉几自己写的)
// function binToDec($bin) {
// 	$count = 0;
//     $strLength = strlen($bin) - 1;
//    	for ($i = 0; $i <= $strLength; $i++) {
//    		$count += (intval($bin[$i]) * pow(2, $strLength - $i));
//    	}

//    	return $count;
// }

#解决方法二 (PHPmath数学函数库里有二进制、八进制、十六进制与十进制相互转换的方法)
function binToDec($bin) {
	return bindec($bin);
}


#***************************************************************************************************************************
# 第八题
# 计算n以下的奇数个数
#***************************************************************************************************************************

function oddCount($n) {
	return intval($n / 2);
}


#***************************************************************************************************************************
# 第九题
# 给定一个数字串，您应该将5以下的任何数字替换为“0”，将5以上的任何数字替换为“1”。返回结果字符串。
#***************************************************************************************************************************

function fake_bin($s){
	$strLength = strlen($s);
	for ($i = 0; $i < $strLength; $i++) { 
		$s[$i] = ($s[$i] >= 5) ?  1 : 0;
	}

	return $s;
}


#***************************************************************************************************************************
# 第十题
# 在一栋3层(编号0 - 2)的建筑中，给定2部电梯(分别命名为“左”和“右”)，编写一个接受3个参数的函数电梯(顺序):
#左边——左边电梯的当前楼层, 右—右电梯的当前楼层, 呼叫——呼叫电梯的楼层, 它应该返回最接近被调用楼层的电梯的名称(“左”/“右”)。
#如果两台电梯都距离所称楼层同样远，则选择右边的电梯。
#您可以假设输入总是0-2之间的有效整数
#***************************************************************************************************************************


function elevator($left, $right, $call) {
	$leftDistice = abs($left - $call);
	$RighttDistice = abs($right - $call);
	if ($leftDistice < $RighttDistice) {
		return "left";
	} else if ($leftDistice > $RighttDistice) {
		return "right";
	} else {
		return "right";
	}
}

// elevator(0, 1, 0); // => "left"
// elevator(0, 1, 1); // => "right"
// elevator(0, 1, 2); // => "right"
// elevator(0, 0, 0); // => "right"
// elevator(0, 2, 1); // => "right"
// var_dump(elevator(0, 1, 0));


#***************************************************************************************************************************
# 第十一题
# 计算每个字符出现的次数，并将其作为数组按原来字符的顺序返回。
#***************************************************************************************************************************


// 方式一(自己)
function orderedCount($text) 
{
  $strAndCount = array_count_values(str_split($text));
  
  array_walk($strAndCount, function(&$value, $key){
    $value = array($key, $value);
  });

  $strAndCount = array_values($strAndCount);

  return $strAndCount;
}

// 方式二
// function orderedCount($text) {
// 	foreach (array_count_values(str_split($text)) as $ch => $val) {
// 		$result[] = [$ch, $val];
// 	}
// 	return $result;
// }

// 方式三
// function orderedCount($text) {
// 	$ks = array_count_values(str_split($text));
// 	return array_map(null, array_keys($ks), array_values($ks));
// }

// "abracadabra"  ==  [['a', 5], ['b', 2], ['r', 2], ['c', 1], ['d', 1]]
//"Code Wars"  ==  [['C', 1], ['o', 1], ['d', 1], ['e', 1], [' ', 1], ['W', 1], ['a', 1], ['r', 1], ['s', 1]]
//"212"  ==  [['2', 2], ['1', 1 ]]
// var_dump(orderedCount('abracadabra'));



#***************************************************************************************************************************
# 第十二题
# 得到一个字符串，返回最长的前缀等于后缀的字符串长度。前缀是字符串的开头，而后缀是字符串的结尾。例如，字符串“abcd”的前缀是[“a”、“ab”、“abc”]。
#后缀是[“bcd”、“cd”、“d”]。前缀和后缀不能重叠。如：'aaaa' 前缀是‘a’,'aa', 后缀是'aa','a'
#***************************************************************************************************************************

function solve($s) 
{  
	$longest = 0;
	$index = 0;
	$length = strlen($s);
	while ($index < floor($length / 2)) {
		$index++;
		if (substr($s, 0, $index) == substr($s, $length-$index)) {
			$longest = $index;
		}
	}
	return $longest;
}

// solve('abcd'）=0，因为没有前缀==后缀。
// solve('abcda'）=1，因为==后缀的最长前缀是 'a'。
// solve('abcdabc'）=3。最长前缀==后缀为 'abc'。
// solve('aaaa'）=2。最长前缀==后缀为'aa'。不应重叠前缀和后缀

#***************************************************************************************************************************
# 第十三题
# 想想“abode”这个词。我们可以看到字母A在位置1，B在位置2。在字母表中，A和B也位于位置1和2。还要注意，居住区中的d和e占据了字母表中它们将占据的位置，即位置4和5。给定一个单词数组，返回每个单词在字母表中所占位置的字母数数组。例如，solve([“abode”，“abc”，“xyzd”]) = [4，3，1]
#***************************************************************************************************************************

// 方式一(自己)
function solve2($arr) 
{
	$letterArray = range('a', 'z');
	return array_map(function($value) use($letterArray){
		$length = strlen($value);
		$count = 0;
		for ($i = 0; $i < $length; $i++) { 
			$index = array_search(strtolower($value[$i]), $letterArray);
			if ($index !== false) {
				if ($index + 1 == $i + 1) {
					$count++;
				}
			}
		}

		return $count;
	}, $arr);
}

// 方式二
// function solve(array $arr): array
// {
//   $acc = [];

//   foreach ($arr as $key => $word) {
//     $acc[$key] = 0;
//     foreach (str_split(strtoupper($word)) as $pos => $letter) {
//       $acc[$key] += ord($letter) - 65 == $pos;
//     }
//   }
  
//   return $acc;
// }



#***************************************************************************************************************************
# 第十四题
# 给定一个整数数组/列表[]，找到这个整数数组中的第n个最小元素
# 数组/列表大小至少为3。
# 数组/列表的数字可以是正、负和零的混合。
# 数组/列表中的数字可能重复，因此不要删除重复。
# 第n个最小（3,1,2，2）==>返回（2）
#***************************************************************************************************************************

function NthSmallest($arr, $pos)
{
	sort($arr, SORT_NUMERIC);
	return $arr[$pos - 1];
}

// var_dump(NthSmallest([2, 169, 13, -5, 0, -1], 4));


#***************************************************************************************************************************
# 第十五题
# 回文是一个单词、短语、数字或其他字符序列，它的读法与前向相同。数字回文的例子有：110011、54322345、54322345
# 对于给定的数字num，编写一个函数来测试它是否为数字回文，并返回一个布尔值（如果为true，则返回false）。
# 如果输入不是整数或小于0，则返回'Not valid'
#***************************************************************************************************************************

// 方式一
function palindrome($num) {
	if (!is_int($num) || $num < 0) {
		return 'Not valid';
	}

	return $num == strrev($num);
}

// 方式二
// function palindrome($num) {
//   if (gettype($num) != "integer" || $num < 0) return "Not valid";
//   $a = array_reverse(str_split($num));
//   $b = str_split($num);
//   return(array_reverse(str_split($num)) == str_split($num) );
// }


#***************************************************************************************************************************
# 第十六题
# 比较数字分组并返回最大的数字。 例如，solve（“gh12cdy695m1”）=695，因为这是所有数字分组中最大的一个
#***************************************************************************************************************************
function solve($s) 
{
	preg_match_all('/\d+/', $s, $match);
	return max($match[0]);
}


#***************************************************************************************************************************
# 第十七题
# 把字母加成一个字母, 传入多个字母参数,a-z,例如 a=1; b=2; c=3; f=6; 即a+b=c;  a+b+c=f;
# 函数将被赋予可变数量的参数，每个参数都是要添加的字母。
# 笔记：字母总是小写的。 字母可能溢出， 任何字母都不应返回“Z”()
#***************************************************************************************************************************

// 解法一：
function addLetters() 
{
	$letters = func_get_args();
	$dec = 26;
	foreach($letters as $letter) {
		$dec += ord($letter) - 96;
	}

	return chr(($dec % 26 ?: 26) + 96);
}

// 解法二：
// function addLetters() {
// 	 $letters = func_get_args();
//   if (empty($letters) || $letters == array('z')) return 'z';
//   return chr((array_sum(array_map('ord', $letters)) - 96*count($letters))%26 + 96);
// }

// 解法三：
// function addLetters() 
// {
// 	$parameters = func_get_args();
// 	$letters = range('a', 'z');

// 	if (empty($parameters)) {
// 		return 'z';
// 	} 
  	
// 	$parameters = changeLettersToNum($parameters);
// 	$remainder = getRemainder($parameters);

// 	if ($remainder == 0) {
// 		return 'z';
// 	}

//   	return $letters[$remainder - 1];
// }

// function changeLettersToNum($parameters)
// {
// 	return array_map(function($value){
// 		return ord($value) - 96;
// 	}, $parameters);
// }

// function getRemainder($parameters)
// {
// 	return array_sum($parameters) % 26;
// }

// addLetters('a', 'b', 'c');
//  addLetters('a', 'b')
//  addLetters('c')
//  addLetters()
//  addLetters('z', 'a')
// var_dump(addLetters('z', 'a'));


#***************************************************************************************************************************
# 第十八题
# 实现一个检查是否有回文的函数。
# 回文是一个单词、短语、数字或其他字符序列，它向后或向前读取相同的内容。这包括大写字母、标点符号和分词。
#***************************************************************************************************************************

// 解法一：
function is_palindrome($line) 
{
	return (strrev($line) == $line) ? true : false;
}

// var_dump(is_palindrome(123456));
// is_palindrome("anna")   ==> true
// is_palindrome("walter") ==> false
// is_palindrome(12321)    ==> true
// is_palindrome(123456)   ==> false

#***************************************************************************************************************************
# 第十九题
# 给定一个n个整数的数组，你需要找出把数组中最小的数相加多少次后它们的和大于或等于k。
#***************************************************************************************************************************

// 解法一：
// function minimumSteps($nums, $value)
// {
// 	sort($nums);

// 	if ($nums[0] >= $value) {
// 		return 0;
// 	}

// 	$counter = 1;
// 	$sum = $nums[0] + $nums[1];
// 	if ($sum >= $value) {
// 		return $counter;
// 	}

// 	unset($nums[0], $nums[1]);

// 	foreach ($nums as $num) {
// 		$sum += $num;
// 		$counter++;

// 		if ($sum >= $value) {
// 			return $counter;
// 		}
// 	}
// }

// 解法二：
function minimumSteps($nums, $value) 
{
	sort($nums);
	$sum = $nums[0];
	if ($sum >= $value) return 0;
	for($i = 1; $i <= count($nums); $i++) {
	  $sum += $nums[$i];
	  if ($sum >= $value) return $i;
	}
}



