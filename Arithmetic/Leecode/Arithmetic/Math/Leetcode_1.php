<?php

#***************************************************************************************************************************
# 1. 整数反转
// 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。

// 示例 1:
// 输入: 123
// 输出: 321

//  示例 2:
// 输入: -123
// 输出: -321

// 示例 3:
// 输入: 120
// 输出: 21

// 示例 4:
// 输入: 0
// 输出: 0

// 示例 5:
// 输入: 1534236469 超过了数值范围
// 输出: 0

// 注意:
// 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。

#***************************************************************************************************************************

function reverse($x)
{
    if ($x == 0) {
        return 0;
    } else if ($x > 0) {
        $reuslt = ltrim(strrev($x), '0');
        return $reuslt > pow(2, 31) ? 0 : $reuslt;
    } else {
        $reuslt = ltrim(strrev(abs($x)), '0');
        return $reuslt > pow(2, 31) ? 0 : '-' . $reuslt;
    }
}

// 方法二 不断获取个位数，然后累计*10
// function reverse($x)
// {
//     if (!is_int($x)) return 0;
//     $res = 0;
//     $max = pow(2, 31) - 1;
//     $min = pow(-2, 31);
//     while ($x != 0) {
//         $remainder = $x % 10;
//         $x = ($x - $remainder) / 10;
//         $res = $res * 10 + $remainder;
//     }
//     if ($res > $max) return 0;
//     if ($res < $min) return 0;
//     return $res;
// }


// var_dump(reverse(1534236469));

#***************************************************************************************************************************
# 2. 回文数 (编号 #9)
// 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

// 示例 1:
// 输入: 121
// 输出: true

// 示例 2:
// 输入: -121
// 输出: false
// 解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。

// 示例 3:
// 输入: 10
// 输出: false
// 解释: 从右向左读, 为 01 。因此它不是一个回文数。

// 进阶:
// 你能不将整数转为字符串来解决这个问题吗？
#***************************************************************************************************************************

// 第一个想法是将数字转换为字符串，并检查字符串是否为回文。但是，这需要额外的非常量空间来创建问题描述中所不允许的字符串。

// 第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。
// 但是，如果反转后的数字大于 int.MAX，我们将遇到整数溢出问题。
// 按照第二个想法，为了避免数字反转可能导致的溢出问题，为什么不考虑只反转 int 数字的一半？毕竟，如果该数字是回文，
// 其后半部分反转后应该与原始数字的前半部分相同。
// 例如，输入 1221，我们可以将数字 “1221” 的后半部分从 “21” 反转为 “12”，并将其与前半部分 “12” 进行比较，
// 因为二者相同，我们得知数字 1221 是回文。
// 让我们看看如何将这个想法转化为一个算法。

// 算法
// 首先，我们应该处理一些临界情况。所有负数都不可能是回文，例如：-123 不是回文，因为 - 不等于 3。所以我们可以对所有负数返回 false。
// 现在，让我们来考虑如何反转后半部分的数字。
// 对于数字 1221，如果执行 1221 % 10，我们将得到最后一位数字 1，要得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，
// 1221 / 10 = 122，再求出上一步结果除以 10 的余数，122 % 10 = 2，就可以得到倒数第二位数字。如果我们把最后一位数字乘以 10，
// 再加上倒数第二位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。如果继续这个过程，我们将得到更多位数的反转数字。
// 现在的问题是，我们如何知道反转数字的位数已经达到原始数字位数的一半？
// 我们将原始数字除以 10，然后给反转后的数字乘上 10，所以，当原始数字小于反转后的数字时，就意味着我们已经处理了一半位数的数字。

// 方法一 将数字转换为字符串，然后翻转字符串与原字符串比较是否相等
// function isPalindrome($x) {
//     $number = strrev(strval($x));
//     if ($number != $x) {
//         return false;
//     }
//     return true;
// }

// 方法二 进阶版，不转换为字符串
function isPalindrome($x) {
    if($x < 0 || ($x % 10 == 0 && $x != 0)) {
        return false;
    }

    $revertedNumber = 0;
    while($x > $revertedNumber) {
        $revertedNumber = $revertedNumber * 10 + $x % 10;
        $x /= 10;
    }

    // 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。
    // 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，
    // 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。
    return $x == $revertedNumber || $x == $revertedNumber / 10;
}

// 复杂度分析：
// 时间复杂度：O(log以10为底的(n))，对于每次迭代，我们会将输入除以10，因此时间复杂度为 O(log以10为底的(n))
// 空间复杂度：O(1)。

var_dump(isPalindrome(-121));